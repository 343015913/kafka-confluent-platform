id: streaming
kind: Template
apiVersion: v1
name: Streaming Service
metadata:
  name: streaming
  labels:
    category: streaming
  annotations:
    description: |
      This is a test template for our streaming service. In the end it
      should provide following services:
      * Kafka ✓
      * Kafka Connect
      * Kafka Schema Registry
      * KSQL
      * REST Proxy
    tags: "kafka,confluent-platform,streaming"
    openshift.io/display-name: "Streaming Service (Confluent Platform Open Source)"
    iconClass: "fa pficon-topology"
parameters:



# Zookeeper Parameters
- description: The number of zookeeper nodes to deploy
  displayName: Zookeeper node count
  name: ZOOKEEPER_NODES
  value: "5"
  required: true
- description: Persistent volume size for Zookeeper
  name: ZOOKEEPER_VOLUME_SIZE
  value: 5Gi
  required: true
- description: The JVM options for Zookeper
  displayName: Zookeeper JVM options
  name: ZOOKEEPER_SERVER_JVMFLAGS
  value: "-Xmx512m"
- description: The JVM options for Zookeper
  displayName: Zookeeper JVM options
  name: ZOOKEEPER_SERVER_JVMFLAGS
  value: "-Xmx512m"
- description: The name of the OpenShift Service exposed for the zookeeper cluster.
  displayName: Zookeeper service name
  name: ZOOKEEPER_SERVICE_NAME
  value: "zookeeper"
  required: true
- description: The name of the OpenShift DNS records service exposed for the zookeeper cluster.
  displayName: Zookeeper DNS records service name
  name: ZOOKEEPER_DNS_SERVICE_NAME
  value: "zoo"
  required: true



# Kafka Parameters
- description: The number of kafka nodes to deploy
  displayName: Kafka node count
  name: KAFKA_NODES
  value: "3"
  required: true
- description: Persistent volume size for Kafka
  name: KAFKA_VOLUME_SIZE
  value: 5Gi
  required: true
- description: The JVM heap options for Kafka
  displayName: Kafka JVM heap options
  name: KAFKA_HEAP_OPTS
  value: "-Xmx2G"
- description: The name of the Kafka cluster. Will be used to annotate cluster with label 'app'
  displayName: App name for Kafka cluster
  name: CLUSTER_APP_NAME
  value: "kafka"
  required: true
- description: The name of the OpenShift Service exposed for the Kafka cluster.
  displayName: Kafka service name
  name: KAFKA_SERVICE_NAME
  value: "kafka"
  required: true
- description: The name of the OpenShift DNS records service used for the Kafka brokers.
  displayName: Kafka DNS records service name
  name: KAFKA_DNS_SERVICE_NAME
  value: "broker"
  required: true
objects:



  # Zookeeper
  # Headless service for Zookeeper Identity
- apiVersion: v1
  kind: Service
  metadata:
    name: zoo
    labels:
      app: kafka
      component: zookeeper
  spec:
    ports:
    - port: 2888
      name: peer # Peer Port (communication ZK<->ZK)
    - port: 3888
      name: leader-election # Leader Election Port (ZK<->ZK)
    clusterIP: None
    selector:
      app: kafka
      component: zookeeper
  # Service for ZK Clients
- apiVersion: v1
  kind: Service
  metadata:
    name: zookeeper
    labels:
      app: kafka
      component: zookeeper
  spec:
    ports:
    - port: 2181
      name: client
    selector:
      app: kafka
      component: zookeeper
  # Stateful Set
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: zoo
    labels:
      app: kafka
      component: zookeeper
  spec:
    serviceName: zoo
    replicas: 3
    template:
      metadata:
        labels:
          app: kafka
          component: zookeeper
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/path: "/metrics"
          prometheus.io/port: "5555"
      spec:
        terminationGracePeriodSeconds: 10
        containers:
          - name: zookeeper
            image: azapps/cp-zookeeper:latest
            env:
              - name: ZOOKEEPER_CLIENT_PORT
                value: "2181"
            ports:
              - containerPort: 2181
                name: client
              - containerPort: 2888
                name: peer
              - containerPort: 3888
                name: leader-election
            volumeMounts:
              - name: datadir
                mountPath:  /var/lib/zookeeper/data
            # Set Zookeeper Server ID by fetching the hostname (hostname is of the form `zookeeper-0`, `zookeeper-1`, …
            command:
            - /bin/bash
            - -c
            - export ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) && /etc/confluent/docker/run
        volumes:
        - name: datadir
          emptyDir: {}
    volumeClaimTemplates:
    - metadata:
        name: datadir
        labels:
          app: kafka
          component: zookeeper
        annotations:
          # Required for successfully claiming a persistent volume
          volume.beta.kubernetes.io/storage-class: glusterfs
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${ZOOKEEPER_VOLUME_SIZE}
# Kafka
# Headless Service
- apiVersion: v1
  kind: Service
  metadata:
    name: broker
    labels:
      app: kafka
      component: kafka-broker
  spec:
    ports:
    - port: 9092
    clusterIP: None
    selector:
      app: kafka
      component: kafka-broker
# Service for bootstrapping
- apiVersion: v1
  kind: Service
  metadata:
    name: kafka
    labels:
      app: kafka
      component: kafka-broker
  spec:
    ports:
    - port: 9092
    selector:
      app: kafka
      component: kafka-broker
# StatefulSet
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: kafka
    labels:
      app: kafka
      component: kafka-broker
  spec:
    serviceName: broker
    replicas: 3
    template:
      metadata:
        labels:
          app: kafka
          component: kafka-broker
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/path: "/metrics"
          prometheus.io/port: "5555"
      spec:
        terminationGracePeriodSeconds: 10
        containers:
        - name: broker
          image: azapps/cp-kafka:latest
          env:
          - name: KAFKA_HEAP_OPTS
            value: "${KAFKA_HEAP_OPTS}"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zoo"
          - name: KAFKA_OPTS
            value: "-javaagent:/opt/prometheus/jmx_prometheus_javaagent.jar=5555:/opt/prometheus/conf/prometheus-config.yml"
          ports:
          - containerPort: 9092
            name: kafka
          - containerPort: 5555
            name: prometheus
          volumeMounts:
          - name: datadir
            mountPath: /var/lib/kafka/data
            # subPath is required because the directory provided by
            # GlusterFS is not empty: It contains .trash directory for
            # trash which we do not need and leads to aborting the
            # Kafka startup.
            subPath: kafka-data
          command:
          - /bin/bash
          - -c
          # Need to unset KAFKA_PORT because it is deprecated and
          # somehow is set.
          # KAFKA_ADVERTISED_LISTENERS is of the form
          # $podname.$servicename:9092 (podname is `kafka-0`,
          # `kafka-1`,…)
          - unset KAFKA_PORT && export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://$HOSTNAME.broker:9092 && /etc/confluent/docker/run
        volumes:
        - name: datadir
          emptyDir: {}
    volumeClaimTemplates:
    - metadata:
        name: datadir
        labels:
          app: kafka
          component: kafka-broker
        annotations:
          volume.beta.kubernetes.io/storage-class: glusterfs
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${KAFKA_VOLUME_SIZE}
